#bubble
input = [3,5,2,5,3,7,5,323,4,56435,3]
input2 = [3,4,5,6,7,8, 5643]
def bubble(a):
    print(f"len of a = {len(a)}")
    for i in range(0,len(a)):
        any_change = False
        for j in range(0,len(a)-1):
            print("compare {} with {}".format(a[j],  a[j+1]))
            if(a[j] > a[j+1]):
                any_change = True
                a[j] ,a[j+1]= a[j+1] , a[j]
                print(a)
        if(not any_change): break
    return a

print(bubble(input))
print(bubble(input2))

#insert
input = [3,5,2,5,3,7,5,323,4,56435,3]
n=len(input)
for j in range(1,n):
    print("last sorted index j -1 = ",j -1)
    value_to_insert = input[j]
    print(f"value_to_insert: [{j}]", value_to_insert)
    for i in range(0,j):
      print(f"compare [{i}] = {input[i]} with {value_to_insert}")
      if(input[i] > value_to_insert):
          for l in range(j-1,i-1,-1 ):
              print(f"move [{l}] to [{l + 1}]")
              input[l+1 ] = input[l]
          print(f"insert value_to_insert to [{i}]")
          input[i] = value_to_insert
          break
    print(input)
print("results : ", input)

a = [3,5,2,5,3,7,5,323,4,56435,3]
n=len(input)
j=0
for i in range(1,n):
    key=a[j+1]
    print(f"key [{j+1}] {a[j+1]}")
    k=j
    while key < a[k] and k >= 0:
        print(f"[{k}] {a[k]} to [{k+1}]")
        a[k+1] =a[k]
        k = k-1
        print(f"[{k}] {a[k]}")
    print(f"[{j+1}] {key} to [{k+1}]")
    a[k+1] = key
    j = j + 1
    print(a)

#Select
a = [3,5,2,5,3,7,5,323,4,56435,3]
n=len(a)
for i in range(0,n):
    s = a[i]
    k=i
    for j in range(i,n):
        if(s > a[j]):
            s=a[j]
            k=j
    a[k]=a[i]
    a[i]=s
    print(a)

#MergSort
a1 = [3,5,2,5,3,7,5,323,4,56435,3]

def merg(a,b):
    print(f"merg {a},{b}")
    c=[]
    i,j=0,0
    while i<len(a) and j < len(b):
        if a[i]>b[j]:
            c.append(b[j])
            j = j +1
            if j == len(b):
                c.extend(a[i:len(a)])
        else:
            c.append(a[i])
            i = i +1
            if(i == len(a)):
                c.extend(b[j:len(b)])
    print(f"merg result: {c}")
    return c

def merg_sort(a):
    print(f"merg sort {a}")
    n=len(a)
    if(n==0):
        return []
    if(n==1):
        return a
    else:
        return merg(merg_sort(a[0:n//2]),merg_sort(a[n//2:n]))

print(merg_sort(a1))

#quick

a1 = [3,5,2,5,3,7,5,323,4,56435,3]

def quick(a) -> [] : 
    print(f"quick sort: {a}")
    n = len(a)
    if(n <2):
        return a
    k = n//2
    pivot = a[k]
    print(f"pivot [{k}]: {pivot}")
    b=[]
    c=[]
    for i in range(n):
        if(i==k):continue
        if(a[i] <= pivot):
            b.append(a[i])
        else:
            c.append(a[i])
    print(b,c)
    first = quick(b)
    print(f"first part =:{first}")
    first.append(pivot)
    first.extend(quick(c))
    print(f"all part =:{first}")
    return first
    
print(quick(a1))

import random
def quick(a) -> [] : 
    print(f"quick sort: {a}")
    n = len(a) -1 
    if(n <1):
        return a
    pivot = a[n]
    left = [x for x in a[:n] if x <= pivot]
    right = [y for y in a[:n] if y > pivot]
    print(left, [pivot] , right)
    return quick(left) + [pivot] + quick(right)

for j in range(10):       
    a1 = [random.randint(0, 1000) for _ in range(18)]    
    a2=quick(a1)
    print(a2)
    for i in range(len(a1)-1):
        if a2[i] > a2[i+1]:
            raise ValueError("sort error",i)
    print("End",i,"\n")

#quicj in olace
import random
def quickd(a,l,r):
    print(a[l:r+1],l,r)
    if l>=r:
        return
    pivot = r
    j=l
    k=r
    print("pivot:",r,"value:",a[pivot])
    r -=1
    while l < r +1 :
        while l <= r and a[l] <= a[pivot]:
            print("l+1",l+1,r)
            l +=1
        while l <= r and a[r] > a[pivot]:
            print("r-1",l,r-1)
            r -=1
        print("before change",a[j:k],"\nl:",l, ", a[l]:",a[l],"; r:",r,"a[r]:",a[r],a)
        if l<r:
            a[l],a[r] = a[r],a[l]
            print("after change",a[j:k],a)
    print("l:",l, "; r:",r)
    a[l],a[pivot] = a[pivot],a[l]
    print("After put pivot:",a[j:k+1],a)
    print("\n")
    print("sort",j,l, a[j:l])
    print("sort",l+2,k, a[l+1:k+1])
    quickd(a,j,l-1)
    quickd(a,l+1,k)
for i in range(10):       
    a1 = [random.randint(0, 1000) for _ in range(2)]    
    quickd(a1,0,len(a1)-1)
    print(a1)
    for i in range(len(a1)-1):
        if a1[i] > a1[i+1]:
            raise ValueError("sort error")
    print("End",i,"\n")

#heapsort
a= [4,1,3,2,16,9,10,14,8,7]
a = [3,5,2,5,3,7,5,323,4,56435,3]

def bubbledown(a,n,i):
    print(f"{a} [n={n}] [i={i}] a[{i}] = {a[i]}")
    largest = i
    left = 2*i+1
    right = 2*i+2
    print(f"[{largest}],[{left}], [{right}]")
    if(left < n and a[largest] < a[left]):
        largest = left
        print(f"largest is left {a[largest]}")
    if(right < n and a[largest] < a[right]):
        largest = right
        print(f"largest is right {a[largest]}")
    if(largest != i):
        print(f"push down [{i}] to [{largest}] {a}")
        a[largest],  a[i] = a[i], a[largest]
        print(f"After push down [{i}] to [{largest}] {a}")
        bubbledown(a,n,largest)
       
n=len(a)
for i in range(n//2 - 1,-1,-1):
    bubbledown(a,n,i)
print(f"\nStart sort {a}")
for i in range(n-1,0,-1):
    print(f"{a} exchange [0] to [{i}]")
    a[0],a[i] = a[i], a[0]
    print(a)
    bubbledown(a,i,0)
       
print(a)
